"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const url = require("url");
const Song_1 = require("./Song");
class SoundcloudService {
    constructor(key) {
        this.search = false;
        this.request = axios_1.default.create({
            baseURL: 'https://api.soundcloud.com',
            params: {
                client_id: key,
            },
        });
    }
    static isViewURL(test) {
        const parsed = url.parse(test);
        if (!parsed.pathname || !parsed.hostname)
            return false;
        const parts = parsed.pathname.split('/');
        return (parsed.hostname === 'soundcloud.com' || parsed.hostname === 'www.soundcloud.com') && parts.length >= 2;
    }
    formatSongs(songs, playlistID) {
        return songs.filter((t) => t.streamable).map((t) => new Song_1.default(this, t, playlistID));
    }
    fetch(fetchable, searchType) {
        return __awaiter(this, void 0, void 0, function* () {
            const songs = [];
            for (const resource of fetchable.playlists.concat(fetchable.songs)) {
                const result = yield this.request.get('/resolve', {
                    params: { url: resource },
                });
                switch (result.data.kind) {
                    case 'playlist':
                        songs.push(...this.formatSongs(result.data.tracks, result.data.id));
                        break;
                    case 'track':
                        songs.push(...this.formatSongs([result.data]));
                        break;
                }
            }
            if (this.search) {
                for (const query of fetchable.queries) {
                    if (searchType === 'playlist') {
                        const result = yield this.request.get('/playlists', {
                            params: { q: query },
                        });
                        songs.push(...this.formatSongs(result.data[0].tracks, result.data[0].id));
                    }
                    else {
                        const result = yield this.request.get('/tracks', {
                            params: { q: query },
                        });
                        songs.push(...this.formatSongs([result.data[0]]));
                    }
                }
            }
            return songs;
        });
    }
    fetchable(content) {
        const words = content.split(' ');
        const fetchable = {
            playlists: [],
            queries: [],
            songs: [],
        };
        const search = [];
        for (const word of words) {
            if (SoundcloudService.isViewURL(word))
                fetchable.songs.push(word);
            else
                search.push(word);
        }
        fetchable.queries.push(search.join(' '));
        return fetchable;
    }
}
exports.default = SoundcloudService;
