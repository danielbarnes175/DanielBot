"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const API = require("simple-youtube-api");
const Song_1 = require("./Song");
class YouTubeService {
    constructor(key) {
        this.search = true;
        this.api = new API(key);
    }
    fetch(fetchable, searchType) {
        return __awaiter(this, void 0, void 0, function* () {
            const fetched = [];
            for (const playlist of fetchable.playlists) {
                const p = yield this.api.getPlaylistByID(playlist);
                if (!p)
                    continue;
                yield p.getVideos();
                fetched.push(...p.videos.map((v) => new Song_1.default(this, v, playlist)));
            }
            for (const song of fetchable.songs) {
                const video = yield this.api.getVideoByID(song);
                if (video)
                    fetched.push(new Song_1.default(this, video));
            }
            if (this.search) {
                for (const query of fetchable.queries) {
                    if (searchType === 'playlist') {
                        const results = yield this.api.searchPlaylists(query, 1);
                        if (results.length) {
                            const list = results[0];
                            const videos = yield list.getVideos();
                            fetched.push(...videos.map((v) => new Song_1.default(this, v, list.id)));
                        }
                    }
                    else {
                        const results = yield this.api.searchVideos(query, 1);
                        if (results.length)
                            fetched.push(new Song_1.default(this, results[0]));
                    }
                }
            }
            return fetched;
        });
    }
    fetchable(content) {
        const words = content.split(' ');
        const query = [];
        const fetchable = {
            playlists: [],
            queries: [],
            songs: [],
        };
        for (const elem of words) {
            const parsed = API.util.parseURL(elem);
            if (!parsed) {
                query.push(elem);
            }
            else if (parsed.type === 'video') {
                fetchable.songs.push(parsed.id);
            }
            else if (parsed.type === 'playlist') {
                fetchable.playlists.push(parsed.id);
            }
        }
        const joined = query.join(' ');
        if (joined.length)
            fetchable.queries.push(joined);
        return fetchable;
    }
}
exports.default = YouTubeService;
